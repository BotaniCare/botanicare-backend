/*
 * BotaniCare API
 * API zur Verwaltung der Pflanzen in der BotaniCare-App.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Plant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-23T01:08:47.858526200+02:00[Europe/Berlin]")
public class Plant {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Object id = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Object name = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Object type = null;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Object location = null;

  public static final String SERIALIZED_NAME_WATER_REQUIREMENT = "waterRequirement";
  @SerializedName(SERIALIZED_NAME_WATER_REQUIREMENT)
  private Object waterRequirement = null;

  public static final String SERIALIZED_NAME_LIGHT_LEVEL = "lightLevel";
  @SerializedName(SERIALIZED_NAME_LIGHT_LEVEL)
  private Object lightLevel = null;

  public static final String SERIALIZED_NAME_WATERING_DATE = "wateringDate";
  @SerializedName(SERIALIZED_NAME_WATERING_DATE)
  private Object wateringDate = null;

  public static final String SERIALIZED_NAME_WATERING_FREQUENCY = "wateringFrequency";
  @SerializedName(SERIALIZED_NAME_WATERING_FREQUENCY)
  private Object wateringFrequency = null;

  public Plant() {
  }

  public Plant id(Object id) {
    
    this.id = id;
    return this;
  }

   /**
   * Die ID der Pflanze
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Die ID der Pflanze")

  public Object getId() {
    return id;
  }


  public void setId(Object id) {
    this.id = id;
  }


  public Plant name(Object name) {
    
    this.name = name;
    return this;
  }

   /**
   * Der Name der Pflanze
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Der Name der Pflanze")

  public Object getName() {
    return name;
  }


  public void setName(Object name) {
    this.name = name;
  }


  public Plant type(Object type) {
    
    this.type = type;
    return this;
  }

   /**
   * Der Typ der Pflanze
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Der Typ der Pflanze")

  public Object getType() {
    return type;
  }


  public void setType(Object type) {
    this.type = type;
  }


  public Plant location(Object location) {
    
    this.location = location;
    return this;
  }

   /**
   * Der Standort der Pflanze
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Der Standort der Pflanze")

  public Object getLocation() {
    return location;
  }


  public void setLocation(Object location) {
    this.location = location;
  }


  public Plant waterRequirement(Object waterRequirement) {
    
    this.waterRequirement = waterRequirement;
    return this;
  }

   /**
   * Der Wasserbedarf der Pflanze
   * @return waterRequirement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Der Wasserbedarf der Pflanze")

  public Object getWaterRequirement() {
    return waterRequirement;
  }


  public void setWaterRequirement(Object waterRequirement) {
    this.waterRequirement = waterRequirement;
  }


  public Plant lightLevel(Object lightLevel) {
    
    this.lightLevel = lightLevel;
    return this;
  }

   /**
   * Der Lichtbedarf der Pflanze
   * @return lightLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Der Lichtbedarf der Pflanze")

  public Object getLightLevel() {
    return lightLevel;
  }


  public void setLightLevel(Object lightLevel) {
    this.lightLevel = lightLevel;
  }


  public Plant wateringDate(Object wateringDate) {
    
    this.wateringDate = wateringDate;
    return this;
  }

   /**
   * Datum der letzten Bewässerung
   * @return wateringDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Datum der letzten Bewässerung")

  public Object getWateringDate() {
    return wateringDate;
  }


  public void setWateringDate(Object wateringDate) {
    this.wateringDate = wateringDate;
  }


  public Plant wateringFrequency(Object wateringFrequency) {
    
    this.wateringFrequency = wateringFrequency;
    return this;
  }

   /**
   * Bewässerungshäufigkeit in Tagen
   * @return wateringFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bewässerungshäufigkeit in Tagen")

  public Object getWateringFrequency() {
    return wateringFrequency;
  }


  public void setWateringFrequency(Object wateringFrequency) {
    this.wateringFrequency = wateringFrequency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Plant plant = (Plant) o;
    return Objects.equals(this.id, plant.id) &&
        Objects.equals(this.name, plant.name) &&
        Objects.equals(this.type, plant.type) &&
        Objects.equals(this.location, plant.location) &&
        Objects.equals(this.waterRequirement, plant.waterRequirement) &&
        Objects.equals(this.lightLevel, plant.lightLevel) &&
        Objects.equals(this.wateringDate, plant.wateringDate) &&
        Objects.equals(this.wateringFrequency, plant.wateringFrequency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, location, waterRequirement, lightLevel, wateringDate, wateringFrequency);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Plant {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    waterRequirement: ").append(toIndentedString(waterRequirement)).append("\n");
    sb.append("    lightLevel: ").append(toIndentedString(lightLevel)).append("\n");
    sb.append("    wateringDate: ").append(toIndentedString(wateringDate)).append("\n");
    sb.append("    wateringFrequency: ").append(toIndentedString(wateringFrequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("location");
    openapiFields.add("waterRequirement");
    openapiFields.add("lightLevel");
    openapiFields.add("wateringDate");
    openapiFields.add("wateringFrequency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Plant
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Plant.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Plant is not found in the empty JSON string", Plant.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Plant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Plant` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Plant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Plant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Plant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Plant.class));

       return (TypeAdapter<T>) new TypeAdapter<Plant>() {
           @Override
           public void write(JsonWriter out, Plant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Plant read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Plant given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Plant
  * @throws IOException if the JSON string is invalid with respect to Plant
  */
  public static Plant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Plant.class);
  }

 /**
  * Convert an instance of Plant to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

