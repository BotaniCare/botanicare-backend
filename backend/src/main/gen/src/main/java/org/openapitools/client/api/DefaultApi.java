/*
 * BotaniCare API
 * API zur Verwaltung der Pflanzen in der BotaniCare-App.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Plant;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for plantsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste aller Pflanzen </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call plantsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call plantsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = plantsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Alle Pflanzen abrufen
     * 
     * @return List&lt;Plant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste aller Pflanzen </td><td>  -  </td></tr>
     </table>
     */
    public List<Plant> plantsGet() throws ApiException {
        ApiResponse<List<Plant>> localVarResp = plantsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Alle Pflanzen abrufen
     * 
     * @return ApiResponse&lt;List&lt;Plant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste aller Pflanzen </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Plant>> plantsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = plantsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Plant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alle Pflanzen abrufen (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste aller Pflanzen </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call plantsGetAsync(final ApiCallback<List<Plant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = plantsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Plant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for plantsIdDelete
     * @param id ID der zu löschenden Pflanze (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Pflanze erfolgreich gelöscht </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call plantsIdDeleteCall(Object id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plants/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call plantsIdDeleteValidateBeforeCall(Object id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling plantsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = plantsIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Eine Pflanze nach ID löschen
     * 
     * @param id ID der zu löschenden Pflanze (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Pflanze erfolgreich gelöscht </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public void plantsIdDelete(Object id) throws ApiException {
        plantsIdDeleteWithHttpInfo(id);
    }

    /**
     * Eine Pflanze nach ID löschen
     * 
     * @param id ID der zu löschenden Pflanze (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Pflanze erfolgreich gelöscht </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> plantsIdDeleteWithHttpInfo(Object id) throws ApiException {
        okhttp3.Call localVarCall = plantsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Eine Pflanze nach ID löschen (asynchronously)
     * 
     * @param id ID der zu löschenden Pflanze (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Pflanze erfolgreich gelöscht </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call plantsIdDeleteAsync(Object id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = plantsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for plantsIdGet
     * @param id ID der abzurufenden Pflanze (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pflanze gefunden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call plantsIdGetCall(Object id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plants/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call plantsIdGetValidateBeforeCall(Object id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling plantsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = plantsIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Eine Pflanze nach ID abrufen
     * 
     * @param id ID der abzurufenden Pflanze (required)
     * @return Plant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pflanze gefunden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public Plant plantsIdGet(Object id) throws ApiException {
        ApiResponse<Plant> localVarResp = plantsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Eine Pflanze nach ID abrufen
     * 
     * @param id ID der abzurufenden Pflanze (required)
     * @return ApiResponse&lt;Plant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pflanze gefunden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plant> plantsIdGetWithHttpInfo(Object id) throws ApiException {
        okhttp3.Call localVarCall = plantsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Plant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Eine Pflanze nach ID abrufen (asynchronously)
     * 
     * @param id ID der abzurufenden Pflanze (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pflanze gefunden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call plantsIdGetAsync(Object id, final ApiCallback<Plant> _callback) throws ApiException {

        okhttp3.Call localVarCall = plantsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Plant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for plantsIdPut
     * @param id ID der zu aktualisierenden Pflanze (required)
     * @param plant Pflanze mit den aktualisierten Informationen (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pflanze erfolgreich aktualisiert </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ungültige Anfrage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call plantsIdPutCall(Object id, Plant plant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = plant;

        // create path and map variables
        String localVarPath = "/plants/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call plantsIdPutValidateBeforeCall(Object id, Plant plant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling plantsIdPut(Async)");
        }
        
        // verify the required parameter 'plant' is set
        if (plant == null) {
            throw new ApiException("Missing the required parameter 'plant' when calling plantsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = plantsIdPutCall(id, plant, _callback);
        return localVarCall;

    }

    /**
     * Eine bestehende Pflanze aktualisieren
     * 
     * @param id ID der zu aktualisierenden Pflanze (required)
     * @param plant Pflanze mit den aktualisierten Informationen (required)
     * @return Plant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pflanze erfolgreich aktualisiert </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ungültige Anfrage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public Plant plantsIdPut(Object id, Plant plant) throws ApiException {
        ApiResponse<Plant> localVarResp = plantsIdPutWithHttpInfo(id, plant);
        return localVarResp.getData();
    }

    /**
     * Eine bestehende Pflanze aktualisieren
     * 
     * @param id ID der zu aktualisierenden Pflanze (required)
     * @param plant Pflanze mit den aktualisierten Informationen (required)
     * @return ApiResponse&lt;Plant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pflanze erfolgreich aktualisiert </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ungültige Anfrage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plant> plantsIdPutWithHttpInfo(Object id, Plant plant) throws ApiException {
        okhttp3.Call localVarCall = plantsIdPutValidateBeforeCall(id, plant, null);
        Type localVarReturnType = new TypeToken<Plant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Eine bestehende Pflanze aktualisieren (asynchronously)
     * 
     * @param id ID der zu aktualisierenden Pflanze (required)
     * @param plant Pflanze mit den aktualisierten Informationen (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pflanze erfolgreich aktualisiert </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ungültige Anfrage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pflanze nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call plantsIdPutAsync(Object id, Plant plant, final ApiCallback<Plant> _callback) throws ApiException {

        okhttp3.Call localVarCall = plantsIdPutValidateBeforeCall(id, plant, _callback);
        Type localVarReturnType = new TypeToken<Plant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for plantsPost
     * @param plant Die zu erstellende Pflanze (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Pflanze erfolgreich erstellt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ungültige Anfrage </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call plantsPostCall(Plant plant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = plant;

        // create path and map variables
        String localVarPath = "/plants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call plantsPostValidateBeforeCall(Plant plant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'plant' is set
        if (plant == null) {
            throw new ApiException("Missing the required parameter 'plant' when calling plantsPost(Async)");
        }
        

        okhttp3.Call localVarCall = plantsPostCall(plant, _callback);
        return localVarCall;

    }

    /**
     * Eine neue Pflanze erstellen
     * 
     * @param plant Die zu erstellende Pflanze (required)
     * @return Plant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Pflanze erfolgreich erstellt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ungültige Anfrage </td><td>  -  </td></tr>
     </table>
     */
    public Plant plantsPost(Plant plant) throws ApiException {
        ApiResponse<Plant> localVarResp = plantsPostWithHttpInfo(plant);
        return localVarResp.getData();
    }

    /**
     * Eine neue Pflanze erstellen
     * 
     * @param plant Die zu erstellende Pflanze (required)
     * @return ApiResponse&lt;Plant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Pflanze erfolgreich erstellt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ungültige Anfrage </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plant> plantsPostWithHttpInfo(Plant plant) throws ApiException {
        okhttp3.Call localVarCall = plantsPostValidateBeforeCall(plant, null);
        Type localVarReturnType = new TypeToken<Plant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Eine neue Pflanze erstellen (asynchronously)
     * 
     * @param plant Die zu erstellende Pflanze (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Pflanze erfolgreich erstellt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ungültige Anfrage </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call plantsPostAsync(Plant plant, final ApiCallback<Plant> _callback) throws ApiException {

        okhttp3.Call localVarCall = plantsPostValidateBeforeCall(plant, _callback);
        Type localVarReturnType = new TypeToken<Plant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
